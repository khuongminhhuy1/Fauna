// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Costumer
}
enum OrderStatus {
  PENDING
  DELIVERING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  PAYPAL
  CREDIT_CARD
  CASH_ON_DELIVERY
}
model User {
  id         Int      @id @default(autoincrement())
  name       String?
  email      String   @unique
  password   String
  role       Role     @default(Costumer)
  created_at DateTime @default(now())
  verified   Boolean  @default(false)
  token      Token?
  Cart       Cart[]
  orders     Orders[]
  avatar     String?
  UserInformation UserInformation?
}

model UserInformation {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  address   String
  city      String
  state     String
  zipCode   String
  phone     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Token {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  token  String
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  total   Int       @default(0)
  Product Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  price       Float
  description String?
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Cart        Cart[]
  orderItems OrderItems[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}
model Orders {
  id            Int         @id @default(autoincrement())
  userId        Int
  orderNumber  String        @unique
  totalAmount   Float
  status        OrderStatus  @default(PENDING)
  paymentMethod PaymentMethod
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  User          User         @relation(fields: [userId], references: [id])
  orderItems    OrderItems[]

  @@index([userId])
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  Order     Orders    @relation(fields: [orderId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])
}